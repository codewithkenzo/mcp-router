import { NextRequest, NextResponse } from 'next/server';
// Import the mock store ONLY FOR MOCKING - remove when using real service
import { mockTaskStore } from '../../run/route';

interface StatusParams {
  params: {
    taskId: string;
  };
}

// This endpoint will eventually query the Python Upsonic service for task status
// For now, it reads from the mock in-memory store.
export async function GET(
  req: NextRequest,
  { params }: { params: { taskId: string } }
) {
  try {
    const taskId = params.taskId;

    if (!taskId) {
      return NextResponse.json({ error: 'Task ID is required' }, { status: 400 });
    }

    console.log(`[API /upsonic/status] Received status request for Task ID: ${taskId}`);

    // TODO: Replace with actual call to the Python Upsonic service to get task status
    const taskStatus = mockTaskStore[taskId];

    if (!taskStatus) {
        // Simulate a task appearing after run is called
        if (taskId.startsWith('temp_')) { // Tasks from /analyze might not be in store immediately
            console.log(`[API /upsonic/status] Task ${taskId} not found, returning pending status.`);
             return NextResponse.json({ taskId, status: 'pending', steps: [], createdAt: new Date().toISOString() });
        } else if (taskId.startsWith('mock-')) { // If it's one of the initial ones, it should exist
             console.error(`[API /upsonic/status] Mock task ${taskId} not found! This shouldn't happen.`);
             return NextResponse.json({ error: `Mock Task not found: ${taskId}` }, { status: 404 });
        } else {
            // For tasks generated by /run (uuidv4), simulate finding it or pending state
            const isNewTask = true; // Replace with logic to check if task ID is known (e.g., from /run history)
            if (isNewTask) {
                console.log(`[API /upsonic/status] Task ${taskId} not found in mock store, returning pending.`);
                // You might want to add it to the store here with pending status
                mockTaskStore[taskId] = {
                    id: taskId,
                    status: 'pending',
                    prompt: 'Unknown prompt (simulated)',
                    steps: [],
                    result: null,
                    error: null,
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                };
                 return NextResponse.json(mockTaskStore[taskId]);
            } else {
                 console.log(`[API /upsonic/status] Task ${taskId} not found.`);
                 return NextResponse.json({ error: `Task not found: ${taskId}` }, { status: 404 });
            }
        }
    }

    // Simulate status progression for the 'running' mock task
    if (taskStatus.status === 'running' && taskStatus.id === 'mock-task-123') {
        const now = Date.now();
        const lastUpdate = new Date(taskStatus.updatedAt).getTime();
        if (now - lastUpdate > 4000) { // Add a step every ~4 seconds
            const stepMessages = [
                'Analyzing page content...',
                'Extracting key points...',
                'Formatting summary...'
            ];
            const nextStepIndex = taskStatus.steps.length - 2; // Base index on steps added after init
            if (nextStepIndex < stepMessages.length) {
                 taskStatus.steps.push({ timestamp: new Date().toISOString(), message: stepMessages[nextStepIndex] });
                 taskStatus.updatedAt = new Date().toISOString();
                 console.log(`[API /upsonic/status] Added step to mock task ${taskId}: ${stepMessages[nextStepIndex]}`);
            } else {
                // Simulate completion after all steps
                taskStatus.status = 'completed';
                taskStatus.result = { summary: 'Playwright enables reliable end-to-end testing for modern web apps...' };
                taskStatus.updatedAt = new Date().toISOString();
                 taskStatus.steps.push({ timestamp: new Date().toISOString(), message: 'Task completed successfully.' });
                 console.log(`[API /upsonic/status] Mock task ${taskId} completed.`);
            }
        }
    }

    console.log(`[API /upsonic/status] Returning status for Task ID ${taskId}:`, taskStatus.status);
    return NextResponse.json(taskStatus);

  } catch (error) {
    console.error('[API /upsonic/status] Error:', error);
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred';
    return NextResponse.json({ error: 'Failed to get task status', details: errorMessage }, { status: 500 });
  }
} 